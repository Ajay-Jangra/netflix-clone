{"version":3,"sources":["axios.js","Row.js","Requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","orignal_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","target","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.affdd486.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// base url to make requests to the movie  database\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\n// instance.get('/foo-bar');\r\n\r\n// // https://api.themoviedb.org/3/foo-bar\r\n\r\nexport default instance;\r\n","import React, { useState,useEffect } from 'react';\r\n import axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";     // it is the url where all the poster will find \r\n function Row({title , fetchUrl,isLargeRow}) {\r\n     \r\n     const [movies, setMovies] = useState([]);        //  this is the way you declare a variable  using react hooks  in usestate give it a initial value that is emppty array []   for using useState we can add useState in import react \r\n     // a  snippt  of code which runs based on spacific condition and variable  after runing the useeffect   movie can be loaded on the app console \r\n      const [trailerUrl , setTrailerUrl ] = useState(\"\");\r\n    useEffect(() => {                 //  in this comp we use axios   so import axios \r\n        async function fetchData(){\r\n           const request =await axios.get(fetchUrl);\r\n           // we get this https://api.themoviedb.org/3/foo-bar/ trending / all / week ? api_key = ${API_KEY} & language=en-US\r\n        //    console.log(request.data.results);  \r\n           setMovies(request.data.results)  ;    // what data str we get\r\n           return request;\r\n        }\r\n        fetchData();   \r\n    }, [fetchUrl]);   //  if [] ,  this tell that run ones when the row loads   don't run again     hear fetcthurl is use in this fxn input parameter   becuase  would't render the use effect   it will be must   that combine with async     \r\n    //  console.table(movies);   // due to this all the rows of movie are seprate\r\n\r\n\r\n\r\n    //    creating option of trailer \r\n    const opts ={\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars:{\r\n            // https://developers.google.com/youtue/player_parameters\r\n            autoplay:1,    \r\n        },\r\n    };\r\n\r\n    // handle the trailer \r\n    const handleClick = (movie) =>{\r\n       if(trailerUrl){\r\n           setTrailerUrl(\"\");\r\n       }\r\n       else{\r\n           movieTrailer(movie?.name|| \"\")\r\n           .then((url) => {\r\n           // https://www.youtube.com/watch?v=XtMThy8QkqU\r\n           const urlParams =new URLSearchParams (new URL(url).search);\r\n           setTrailerUrl(urlParams.get(\"v\"));\r\n           }).catch(error => console.log(error));\r\n       }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{title}</h1>\r\n\r\n            <div className=\"row_posters\">\r\n                  {/* severl row poster (s) */}\r\n\r\n                 {movies.map((movie) =>(\r\n                     <img \r\n                     key ={movie.id} \r\n                     onClick ={() => handleClick(movie)} \r\n                     className={`row_poster ${isLargeRow&&\"row_posterLarge\"}`}  \r\n                     src = {`${base_url}${ \r\n                          isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                        }`} \r\n                        alt ={movie.name}\r\n                    />\r\n                ))}                                    \r\n            </div>\r\n            {trailerUrl && <Youtube videoId= {trailerUrl} opts = {opts} />\r\n             }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n export default Row;\r\n","//  it is just a module\r\n//import React from 'react';\r\n\r\nconst API_KEY = \"4d776e7feed1440b3cabc9dfa49e8acd\";\r\n\r\n// const FEATURED_API = \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=4d776e7feed1440b3cabc9dfa49e8acd&page=1\";\r\n\r\n// const THEATRE_API = \"/discover/movie/?certification_country=US&certification=R&sort_by=vote_average.desc&api_key=4d776e7feed1440b3cabc9dfa49e8acd&page=1\";\r\n\r\n\r\n\r\n// const SEARCH_API = \"https://api.themoviedb.org/3/search/movie?&api_key=4d776e7feed1440b3cabc9dfa49e8acd&query=\";\r\n\r\n\r\n\r\nconst requests = {\r\n\r\n     fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n     fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks-213`,\r\n\r\n     fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n     fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n\r\n     fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n     fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n\r\n     fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n     fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React,{useState,useEffect} from 'react';\r\n\r\nimport axios from './axios' ;    // remember postman kind thing\r\n\r\nimport requests from './Requests';\r\nimport \"./Banner.css\";\r\nfunction Banner() {\r\n    // first we need request   usestate is responsible for whatever  random movie gets selected at the top\r\n    const [movie, setMovie]= useState([]);\r\n\r\n//    useEffect is a peace of code which runs based on a given condition so in this case we want this run once when the Banner component load\r\n// asynchronous function which makes a call to external api      \r\n// fetchData    fetching the data\r\n useEffect(() => {\r\n     async function fetchData(){\r\n      const request = await axios.get(requests.fetchActionMovies)\r\n        setMovie(\r\n          request.data.results[\r\n          Math.floor(Math.random()*request.data.results.length)\r\n          ]\r\n        );\r\n        return request;\r\n    }\r\n     fetchData();\r\n }, []);\r\n\r\nconsole.log(movie)\r\n\r\n// truncate fun just copy paste from stackoverflow\r\n// {/* truncate just  set  read more ............ */}\r\n  function truncate(str,n){\r\n      return str?.length>n?str.substr(0,n-1)+\"...\":str;\r\n  }\r\n    return (\r\n        <header className =\"banner\"\r\n        style = {{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n            backgroundPosition: \"center center\",\r\n         }}\r\n        >   { /*<<< backgroung image */}\r\n            <div className =\"banner_contents\">\r\n                    {/* title */}\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.orignal_name }</h1>\r\n            \r\n            \r\n              <div className = \"banner_buttons\">\r\n                    {/* div > 2 buttons */}\r\n                <button className = \" banner_button\">Play</button>\r\n                <button className = \" banner_button\">My List</button>\r\n              </div>\r\n            \r\n              {/* description */}\r\n              <p className= \"banner_description\">\r\n                  {/* {movie?.overview} */}\r\n                {/* truncate just  set  read more ............ */}\r\n                    {truncate(movie?.overview,150)}   \r\n               </p>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React,{useState,useEffect} from 'react'\r\nimport \"./Nav.css\";\r\nfunction Nav() {\r\n    const [show , handleShow] = useState(false);\r\n    useEffect(() => {\r\n         window.addEventListener(\"scroll\",()=>{\r\n             if(window.scrollY > 100){\r\n                  handleShow(true);\r\n             }\r\n             else handleShow(false);\r\n         });\r\n         return () =>{\r\n             window.removeEventListener(\"scroll\");\r\n         };\r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show&& \"nav_black\"}`}>\r\n            <img className =\"nav_logo\"  src =\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/2560px-Netflix_2015_logo.svg.png\" alt=\"Netflix Logo\"\r\n            />\r\n             <img className =\"nav_avatar\"  src =\"https://ih0.redbubble.net/image.618427277.3222/flat,1000x1000,075,f.u2.jpg\" alt=\"Netflix Logo\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport './Nav.css';\nimport Row from \"./Row\";\n \nimport requests from \"./Requests\" ;\nimport Banner from \"./Banner\"\nimport Nav from \"./Nav\"\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        {/* navbar */}\n        <Nav />\n\n        {/* banner */}\n\n       <Banner  />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals}  isLargeRow={true} />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} /> \n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      <footer>\n        <h1>Footer</h1>\n          <div className=\"footer-about-dev\">\n            <p>Devloper : Ajay Jangra</p>\n            <p>Devlope only for project perspective </p>\n            <p><a target=\"blank\" href=\"https://www.linkedin.com/in/ajay-jangra-376ba1202/\">Linked In</a></p>\n          </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}