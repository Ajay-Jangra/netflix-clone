{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/HP/Desktop/reactPractice/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/HP/Desktop/reactPractice/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/HP/Desktop/reactPractice/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from\"./axios\";import\"./Row.css\";import Youtube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";// it is the url where all the poster will find \nfunction Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];//  this is the way you declare a variable  using react hooks  in usestate give it a initial value that is emppty array []   for using useState we can add useState in import react \n// a  snippt  of code which runs based on spacific condition and variable  after runing the useeffect   movie can be loaded on the app console \nvar _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){//  in this comp we use axios   so import axios \nfunction fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;// we get this https://api.themoviedb.org/3/foo-bar/ trending / all / week ? api_key = ${API_KEY} & language=en-US\n//    console.log(request.data.results);  \nsetMovies(request.data.results);// what data str we get\nreturn _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);//  if [] ,  this tell that run ones when the row loads   don't run again     hear fetcthurl is use in this fxn input parameter   becuase  would't render the use effect   it will be must   that combine with async     \n//  console.table(movies);   // due to this all the rows of movie are seprate\n//    creating option of trailer \nvar opts={height:\"390\",width:\"100%\",playerVars:{// https://developers.google.com/youtue/player_parameters\nautoplay:1}};// handle the trailer \nvar handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){// https://www.youtube.com/watch?v=XtMThy8QkqU\nvar urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h1\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row_poster \".concat(isLargeRow&&\"row_posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(Youtube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["C:/Users/HP/Desktop/reactPractice/netflix/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":"6dAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAAyBC,SAAzB,KAA0C,OAA1C,CACC,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACD,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFAGA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CAA6D;AAC5D,QAASC,CAAAA,GAAT,MAA4C,IAA9BC,CAAAA,KAA8B,MAA9BA,KAA8B,CAAtBC,QAAsB,MAAtBA,QAAsB,CAAbC,UAAa,MAAbA,UAAa,CAExC,cAA4BT,QAAQ,CAAC,EAAD,CAApC,wCAAOU,MAAP,eAAeC,SAAf,eAAiD;AACjD;AACC,eAAsCX,QAAQ,CAAC,EAAD,CAA9C,yCAAOY,UAAP,eAAoBC,aAApB,eACFZ,SAAS,CAAC,UAAM,CAAkB;AAAlB,QACGa,CAAAA,SADH,qIACZ,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACSQ,OADT,eAEG;AACH;AACGL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAAsC;AAJzC,gCAKUF,OALV,wDADY,4CAQZF,SAAS,GACZ,CATQ,CASN,CAACN,QAAD,CATM,CAAT,CASkB;AAClB;AAIA;AACA,GAAMW,CAAAA,IAAI,CAAE,CACRC,MAAM,CAAE,KADA,CAERC,KAAK,CAAE,MAFC,CAGRC,UAAU,CAAC,CACP;AACAC,QAAQ,CAAC,CAFF,CAHH,CAAZ,CASA;AACA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAU,CAC3B,GAAGb,UAAH,CAAc,CACVC,aAAa,CAAC,EAAD,CAAb,CACH,CAFD,IAGI,CACAT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAc,EAAf,CAAZ,CACCC,IADD,CACM,SAACC,GAAD,CAAS,CACf;AACA,GAAMC,CAAAA,SAAS,CAAE,GAAIC,CAAAA,eAAJ,CAAqB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAlC,CAAjB,CACAnB,aAAa,CAACgB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb,CACC,CALD,EAKGkB,KALH,CAKS,SAAAC,KAAK,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAJ,EALd,EAMH,CACH,CAZD,CAcA,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,oBAAK3B,KAAL,EADJ,cAGI,YAAK,SAAS,CAAC,aAAf,UAGMG,MAAM,CAAC2B,GAAP,CAAW,SAACZ,KAAD,qBACR,YAEA,OAAO,CAAG,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFV,CAGA,SAAS,sBAAgBhB,UAAU,EAAE,iBAA5B,CAHT,CAIA,GAAG,WAAOJ,QAAP,SACEI,UAAU,CAAGgB,KAAK,CAACa,WAAT,CAAuBb,KAAK,CAACc,aADzC,CAJH,CAOG,GAAG,CAAGd,KAAK,CAACC,IAPf,EACMD,KAAK,CAACe,EADZ,CADQ,EAAX,CAHN,EAHJ,CAkBK5B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAGA,UAAnB,CAA+B,IAAI,CAAIO,IAAvC,EAlBnB,GADJ,CAwBH,CAEA,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState,useEffect } from 'react';\r\n import axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";     // it is the url where all the poster will find \r\n function Row({title , fetchUrl,isLargeRow}) {\r\n     \r\n     const [movies, setMovies] = useState([]);        //  this is the way you declare a variable  using react hooks  in usestate give it a initial value that is emppty array []   for using useState we can add useState in import react \r\n     // a  snippt  of code which runs based on spacific condition and variable  after runing the useeffect   movie can be loaded on the app console \r\n      const [trailerUrl , setTrailerUrl ] = useState(\"\");\r\n    useEffect(() => {                 //  in this comp we use axios   so import axios \r\n        async function fetchData(){\r\n           const request =await axios.get(fetchUrl);\r\n           // we get this https://api.themoviedb.org/3/foo-bar/ trending / all / week ? api_key = ${API_KEY} & language=en-US\r\n        //    console.log(request.data.results);  \r\n           setMovies(request.data.results)  ;    // what data str we get\r\n           return request;\r\n        }\r\n        fetchData();   \r\n    }, [fetchUrl]);   //  if [] ,  this tell that run ones when the row loads   don't run again     hear fetcthurl is use in this fxn input parameter   becuase  would't render the use effect   it will be must   that combine with async     \r\n    //  console.table(movies);   // due to this all the rows of movie are seprate\r\n\r\n\r\n\r\n    //    creating option of trailer \r\n    const opts ={\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars:{\r\n            // https://developers.google.com/youtue/player_parameters\r\n            autoplay:1,    \r\n        },\r\n    };\r\n\r\n    // handle the trailer \r\n    const handleClick = (movie) =>{\r\n       if(trailerUrl){\r\n           setTrailerUrl(\"\");\r\n       }\r\n       else{\r\n           movieTrailer(movie?.name|| \"\")\r\n           .then((url) => {\r\n           // https://www.youtube.com/watch?v=XtMThy8QkqU\r\n           const urlParams =new URLSearchParams (new URL(url).search);\r\n           setTrailerUrl(urlParams.get(\"v\"));\r\n           }).catch(error => console.log(error));\r\n       }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{title}</h1>\r\n\r\n            <div className=\"row_posters\">\r\n                  {/* severl row poster (s) */}\r\n\r\n                 {movies.map((movie) =>(\r\n                     <img \r\n                     key ={movie.id} \r\n                     onClick ={() => handleClick(movie)} \r\n                     className={`row_poster ${isLargeRow&&\"row_posterLarge\"}`}  \r\n                     src = {`${base_url}${ \r\n                          isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                        }`} \r\n                        alt ={movie.name}\r\n                    />\r\n                ))}                                    \r\n            </div>\r\n            {trailerUrl && <Youtube videoId= {trailerUrl} opts = {opts} />\r\n             }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n export default Row;\r\n"]},"metadata":{},"sourceType":"module"}